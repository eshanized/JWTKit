import React, { useState, useEffect } from 'react';
import { Card, Button, Alert, ListGroup, Badge, Form } from 'react-bootstrap';
import axios from 'axios';

const VulnerabilityScanner = ({ token = '' }) => {
  const [inputToken, setInputToken] = useState(token);
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    setInputToken(token);
  }, [token]);

  useEffect(() => {
    if (inputToken) {
      scanToken();
    }
  }, []);

  const scanToken = async () => {
    if (!inputToken || !inputToken.trim()) {
      setError('Please enter a JWT token to scan');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post('http://localhost:8000/vulnerabilities', { token: inputToken });
      setResults(response.data);
    } catch (err) {
      setError(`Error scanning token: ${err.response?.data?.detail || err.message}`);
      // Try to do basic local analysis as fallback
      performLocalAnalysis();
    } finally {
      setLoading(false);
    }
  };

  const performLocalAnalysis = () => {
    try {
      const parts = inputToken.split('.');
      if (parts.length !== 3) {
        throw new Error('Invalid JWT format');
      }

      const header = JSON.parse(atob(parts[0]));
      const payload = JSON.parse(atob(parts[1]));
      
      const vulnerabilities = [];
      
      // Check algorithm
      if (header.alg === 'none') {
        vulnerabilities.push({
          severity: 'high',
          issue: 'None Algorithm',
          description: 'The token uses "none" algorithm, signature verification is bypassed.'
        });
      }
      
      if (header.alg?.startsWith('HS')) {
        vulnerabilities.push({
          severity: 'info',
          issue: 'HMAC Algorithm',
          description: 'The token uses HMAC which might be vulnerable to brute force if a weak secret is used.'
        });
      }
      
      // Check expiration
      if (!payload.exp) {
        vulnerabilities.push({
          severity: 'medium',
          issue: 'No Expiration',
          description: 'The token does not have an expiration time (exp claim).'
        });
      }
      
      setResults({
        token_info: { header, payload },
        vulnerabilities,
        risk_score: vulnerabilities.length,
        recommendations: [
          'Use RS256 instead of HS256 for better security',
          'Always include expiration time (exp) in tokens'
        ]
      });
    } catch (e) {
      setError(`Error in local analysis: ${e.message}`);
    }
  };

  const handleTokenInput = (e) => {
    setInputToken(e.target.value);
  };

  const getSeverityBadge = (severity) => {
    const badgeColor = {
      high: 'danger',
      medium: 'warning',
      low: 'secondary',
      info: 'info'
    }[severity] || 'secondary';
    
    return <Badge bg={badgeColor}>{severity.toUpperCase()}</Badge>;
  };

  return (
    <div>
      <h2>JWT Vulnerability Scanner</h2>
      <p>Analyze your JWT for security issues and vulnerabilities</p>
      
      <Form className="mb-3">
        <Form.Group className="mb-3">
          <Form.Label>JWT Token</Form.Label>
          <Form.Control
            as="textarea"
            rows={3}
            value={inputToken}
            onChange={handleTokenInput}
            placeholder="Paste your JWT token here..."
          />
          <Form.Text className="text-muted">
            Enter the JWT token to scan for vulnerabilities
          </Form.Text>
        </Form.Group>
        
        <Button 
          variant="primary" 
          onClick={scanToken} 
          disabled={loading || !inputToken || !inputToken.trim()}
        >
          {loading ? 'Scanning...' : 'Scan Token'}
        </Button>
      </Form>
      
      {error && (
        <Alert variant="danger">
          {error}
        </Alert>
      )}
      
      {results && (
        <>
          <Card className="mb-4">
            <Card.Header className="bg-dark text-white">
              <strong>Vulnerability Scan Results</strong>
            </Card.Header>
            <Card.Body>
              <div className="d-flex justify-content-between align-items-center mb-3">
                <h5>Overall Risk Score:</h5>
                <Badge 
                  bg={results.risk_score > 3 ? 'danger' : results.risk_score > 1 ? 'warning' : 'success'} 
                  style={{ fontSize: '1.1rem', padding: '0.5rem 1rem' }}
                >
                  {results.risk_score} {results.risk_score > 3 ? '(High)' : results.risk_score > 1 ? '(Medium)' : '(Low)'}
                </Badge>
              </div>
              
              <h5>Detected Issues:</h5>
              {results.vulnerabilities.length === 0 ? (
                <Alert variant="success">
                  No vulnerabilities detected in this token!
                </Alert>
              ) : (
                <ListGroup variant="flush">
                  {results.vulnerabilities.map((vuln, index) => (
                    <ListGroup.Item key={index} className="d-flex justify-content-between align-items-start">
                      <div className="ms-2 me-auto">
                        <div className="fw-bold d-flex align-items-center gap-2">
                          {vuln.issue} {getSeverityBadge(vuln.severity)}
                        </div>
                        <div className="text-muted mt-1">{vuln.description}</div>
                      </div>
                    </ListGroup.Item>
                  ))}
                </ListGroup>
              )}
            </Card.Body>
          </Card>
          
          {results.recommendations?.length > 0 && (
            <Card>
              <Card.Header className="bg-primary text-white">
                <strong>Security Recommendations</strong>
              </Card.Header>
              <ListGroup variant="flush">
                {results.recommendations.map((rec, index) => (
                  <ListGroup.Item key={index}>
                    <i className="bi bi-check-circle-fill text-success me-2"></i>
                    {rec}
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </Card>
          )}
        </>
      )}
    </div>
  );
};

export default VulnerabilityScanner;