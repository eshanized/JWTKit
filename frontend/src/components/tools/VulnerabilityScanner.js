import React, { useState } from 'react';
import axios from 'axios';
import '../Tools.css';

const VulnerabilityScanner = () => {
  const [token, setToken] = useState('');
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleTokenChange = (e) => {
    setToken(e.target.value);
    setError(null);
    setResults(null);
  };

  const scanToken = async () => {
    if (!token.trim()) {
      setError('Please enter a JWT token');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await axios.post('http://localhost:8000/vulnerabilities', {
        token
      });

      setResults(response.data);
    } catch (err) {
      console.error('Error scanning token:', err);
      
      if (err.response && err.response.data) {
        setError(err.response.data.error || 'Failed to scan token');
      } else {
        setError('Failed to connect to server. Please check if the backend is running.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Helper function to get color class based on severity
  const getSeverityClass = (severity) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return 'severity-high';
      case 'medium':
        return 'severity-medium';
      case 'low':
        return 'severity-low';
      case 'info':
        return 'severity-info';
      default:
        return '';
    }
  };

  return (
    <div className="tool-container">
      <div className="tool-header">
        <h1>JWT Vulnerability Scanner</h1>
        <p>Scan your JWT token for potential security issues and vulnerabilities.</p>
      </div>
      
      <div className="tool-content">
        <div className="form-group">
          <label htmlFor="token">JWT Token:</label>
          <textarea
            id="token"
            className="form-control token-input"
            value={token}
            onChange={handleTokenChange}
            placeholder="Paste your JWT token here"
            rows={4}
          />
        </div>
        
        <div className="form-actions">
          <button 
            className="btn btn-primary" 
            onClick={scanToken}
            disabled={loading}
          >
            {loading ? 'Scanning...' : 'Scan for Vulnerabilities'}
          </button>
        </div>
        
        {error && (
          <div className="error-message">
            {error}
          </div>
        )}
        
        {results && (
          <div className="scan-results">
            <div className="result-container">
              <div className="result-item">
                <h3>Token Information</h3>
                <div className="token-info-sections">
                  <div className="token-info-section">
                    <h4>Header</h4>
                    <pre>{JSON.stringify(results.token_info.header, null, 2)}</pre>
                  </div>
                  <div className="token-info-section">
                    <h4>Payload</h4>
                    <pre>{JSON.stringify(results.token_info.payload, null, 2)}</pre>
                  </div>
                </div>
              </div>
              
              <div className="result-item">
                <h3>Vulnerabilities {results.vulnerabilities.length > 0 && `(${results.vulnerabilities.length})`}</h3>
                
                {results.vulnerabilities.length === 0 ? (
                  <div className="no-vulnerabilities">
                    No vulnerabilities detected âœ“
                  </div>
                ) : (
                  <div className="vulnerabilities-list">
                    {results.vulnerabilities.map((vuln, index) => (
                      <div 
                        key={index} 
                        className={`vulnerability-item ${getSeverityClass(vuln.severity)}`}
                      >
                        <div className="vulnerability-header">
                          <h4>{vuln.issue}</h4>
                          <span className="severity-badge">{vuln.severity}</span>
                        </div>
                        <p>{vuln.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              
              {results.recommendations && results.recommendations.length > 0 && (
                <div className="result-item">
                  <h3>Recommendations</h3>
                  <ul className="recommendations-list">
                    {results.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {results.risk_score !== undefined && (
                <div className="risk-score">
                  <h3>Risk Score</h3>
                  <div className="score-display">
                    <div className={`score-value ${
                      results.risk_score > 5 ? 'high' : 
                      results.risk_score > 2 ? 'medium' : 'low'
                    }`}>
                      {results.risk_score}
                    </div>
                    <div className="score-label">
                      {results.risk_score > 5 ? 'High Risk' : 
                       results.risk_score > 2 ? 'Medium Risk' : 'Low Risk'}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityScanner;